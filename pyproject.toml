[project]
name = "fastapi-backports"
version = "0.1.2"
description = "Backports for FastAPI"
authors = [
    { name = "Yurii Karabas", email = "1998uriyyo@gmail.com" },
]
readme = "README.md"
license = "MIT"
requires-python = ">=3.8"
classifiers = [
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
]
dependencies = [
    "fastapi>=0.115.0",
]

[project.urls]
Repository = "https://github.com/uriyyo/fastapi-backports"

[dependency-groups]
dev = [
    "httpx>=0.28.1",
    "pre-commit>=3.5.0",
    "pytest>=8.3.5",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "ruff>=0.13.3",
    "ty>=0.0.1a21",
    "uvicorn>=0.33.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 120
target-version = "py38"

[tool.ruff.lint]
select = [
    "ALL", # select all checks by default
]
ignore = [
    # single rule exclude
    "C901", # is too complex (McCabe complexity)
    "S101", # use of assert detected
    "PLC0415", # ignore only top-level imports
    "SLF001", # allow access to private members
    "COM812", # will be handled by ruff format
    "PERF403", # ignore replacing with compehension
    "B008", # do not perform function calls in argument defaults
    "TC002", # skip moving imports to TYPE_CHECKING block
    "TC003", # skip moving imports to TYPE_CHECKING block
    "N802", # ignore function name should be lowercase
    "TRY003", # allow long exception message
    "PLR0912", # allow too many branches
    "PLR0913", # allow too many arguments
    "PLR0915", # allow too many statements

    # full rule exclude
    "D", # ignore docstrings
    "FA", # ignore future annotations
    "ANN", # ignore annotations
    "FIX", # ignore FIXMEs
    "TD", # ignore all TODOs
    "ARG", # ignore unused arguments
    "FBT", # ignore flake8-boolean-trap
    "EM", # ignore error message formatting
    "UP", # ignore upgrade suggestions
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    ".venv",
]
per-file-ignores = { }
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
testpaths = [
    "tests",
]
addopts = [
    "--cov=fastapi_backports",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-append",
]

[tool.coverage.paths]
source = ["fastapi_backports"]

[tool.coverage.run]
source = ["fastapi_backports"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@abstractmethod",
    "@overload",
    "if TYPE_CHECKING:",
]
